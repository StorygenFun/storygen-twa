'use client'

import { FC, useCallback, useState } from 'react'
import { ChatAnthropic } from '@langchain/anthropic'
import { PromptTemplate } from '@langchain/core/prompts'
// import { ChatOpenAI } from '@langchain/openai'
import TextArea from 'antd/es/input/TextArea'
import { LLMChain } from 'langchain/chains'
import { ConversationSummaryMemory } from 'langchain/memory'

// const openAIApiKey = '123'
const anthropicApiKey =
  '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'

// const modeOpenAi = new ChatOpenAI({
//   openAIApiKey: openAIApiKey,
//   model: 'gpt-3.5-turbo',
//   // temperature: 0,
// })

const modelAnthropic = new ChatAnthropic({
  anthropicApiKey: anthropicApiKey,
  model: 'claude-3-opus-20240229',
  // temperature: 0,
})

const model = modelAnthropic

export const Story: FC = () => {
  const memoryKey = 'chat_history_13'

  const [memory, setMemory] = useState<ConversationSummaryMemory | null>(null)
  const [prompt, setPrompt] = useState<any | null>(null)
  const [chain, setChain] = useState<LLMChain | null>(null)
  const [value, setValue] = useState<string | null>(
    '–í —Ç–µ–º–Ω–æ–º –ª–µ—Å—É –∂–∏–ª–∞ —Å—Ç–∞—Ä—É—à–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ª—é–±–∏–ª–∞ —Å–æ–±–∏—Ä–∞—Ç—å –≥—Ä–∏–±—ã. –û–¥–Ω–∞–∂–¥—ã –æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å –≤ –ª–µ—Å –∏ –Ω–∞—à–ª–∞ —Ç–∞–º –±–æ–ª—å—à–æ–π –≥—Ä–∏–±. –û–Ω–∞ –≤–∑—è–ª–∞ –µ–≥–æ –¥–æ–º–æ–π –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –∏–∑ –Ω–µ–≥–æ –≤–∫—É—Å–Ω—ã–π —É–∂–∏–Ω. –ù–æ –∫–æ–≥–¥–∞ –æ–Ω–∞ –ø—Ä–æ—Å–Ω—É–ª–∞—Å—å —É—Ç—Ä–æ–º, –æ–Ω–∞ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞, —á—Ç–æ –≥—Ä–∏–± –∏—Å—á–µ–∑. –°—Ç–∞—Ä—É—à–∫–∞ —Ä–µ—à–∏–ª–∞ –Ω–∞–π—Ç–∏ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å –≤ –ª–µ—Å.',
  )
  const [history, setHistory] = useState<(string | null)[]>([])

  const initMemory = async () => {
    setMemory(
      new ConversationSummaryMemory({
        memoryKey,
        llm: model,
      }),
    )
  }

  const initPrompt = async () => {
    setPrompt(
      PromptTemplate.fromTemplate(`–ù–∏–∂–µ –ø—Ä–∏–≤–æ–¥–∏—Ç—Å—è —Ä–∞–∑–≥–æ–≤–æ—Ä –º–µ–∂–¥—É —á–µ–ª–æ–≤–µ–∫–æ–º –≤ —Ä–æ–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞ –∏ –ò–ò –≤ —Ä–æ–ª–∏ –∞–≤—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –∫–Ω–∏–≥–∏ –≤ —Å—Ç–∏–ª–µ –ø–∏—Å–∞—Ç–µ–ª—è –°—Ç–∏–≤–µ–Ω –ö–∏–Ω–≥.
–ó–∞–∫–∞–∑—á–∏–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ç–µ–º—É –¥–ª—è –∫–Ω–∏–≥–∏, –∞ –∞–≤—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤ –∂–∞–Ω—Ä–µ "—É–∂–∞—Å—ã". –í–æ–∑—Ä–æ—Å—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è —ç—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏ - –≤–∑—Ä–æ—Å–ª—ã–µ.
–ó–∞–∫–∞–∑—á–∏–∫ –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ—Ç–≤–µ—Ç–∞, –∏—Ö –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å.
–¢—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –¥–∞–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è –∏–ª–∏ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞.
–ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —ç–ø–∏–∑–æ–¥–æ–≤ –Ω–µ–ª—å–∑—è –Ω–∞—á–∏–Ω–∞—Ç—å –∏—Ö —Å –Ω—É–º–µ—Ä–∞—Ü–∏–∏: –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –≤—Ä–æ–¥–µ "–≠–ø–∏–∑–æ–¥ ‚ÑñX" –∏–ª–∏ "–≠–ø–∏–∑–æ–¥ X", –≥–¥–µ X - –Ω–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞.
–¢—Ä–µ–±—É–µ—Ç—Å—è  –Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç–ø–∏–∑–æ–¥–æ–≤, –∞ –∏—Ö —Ö—É–¥–æ–∂–µ—Ç—Å–≤–µ–Ω–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.
–í—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ –†—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∫—Ä–æ–º–µ —Å–ª—É—á–∞–µ–≤, –µ—Å–ª–∏ –Ω–µ—Ç —É–∫–∞–∑–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —è–∑—ã–∫.
  
Current conversation:
{${memoryKey}}
human: {input}
AI:`),
    )
  }

  const initChain = async () => {
    if (!memory || !prompt) return
    setChain(new LLMChain({ llm: model, prompt, memory }))
  }

  const handleInvoke = useCallback(async () => {
    if (!chain || !memory) return
    console.log('üöÄ ~ value:', value)
    const initialStory = `–¢–µ–º–∞ –∏—Å—Ç–æ—Ä–∏–∏: "${value}"
–ù—É–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ 3 —ç–ø–∏–∑–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ–ø–∏—Å—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é.
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–¥–µ–ª–∞–π –≤ –æ–¥–Ω–æ–º –µ–¥–∏–Ω–æ–º JSON, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑ —Å–µ–±—è –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ "scene" —Å –ø–æ–ª—è–º–∏ "t" (–Ω–∞–∑–≤–∞–Ω–∏–µ) –∏ "d" (–æ–ø–∏—Å–∞–Ω–∏–µ), —Ç.–µ. [scene, scene, ... scene].
–ù–µ –Ω—É–º–µ—Ä—É–π —ç–ø–∏–∑–æ–¥—ã.
–†–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –æ–∫–æ–ª–æ 500 —Å–∏–º–≤–æ–ª–æ–≤.
–ü—Ä–∏—à–ª–∏ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ –≤—Å–µ—Ö 3 —ç–ø–∏–∑–æ–¥–æ–≤ –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤.
–í –æ—Ç–≤–µ—Ç–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ —ç—Ç–æ–≥–æ JSON.`
    const result = [...history, initialStory]
    setHistory(result)
    const res0 = await chain.invoke({ input: initialStory })
    console.log('üöÄ ~ res0:', res0)
    result.push(res0.text)
    setHistory(result)

    const input1 = `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –Ω–∞–ø–∏—à–∏ —ç–ø–∏–∑–æ–¥ ‚Ññ1. –û–±—ä—ë–º –æ–∫–æ–ª–æ 3000 —Å–∏–º–≤–æ–ª–æ–≤`
    const res1 = await chain.invoke({ input: input1 })
    console.log('üöÄ ~ res1:', res1)
    result.push(res1.text)
    setHistory(result)

    const input2 = `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –Ω–∞–ø–∏—à–∏ —ç–ø–∏–∑–æ–¥ ‚Ññ2. –û–±—ä—ë–º –æ–∫–æ–ª–æ 3000 —Å–∏–º–≤–æ–ª–æ–≤`
    const res2 = await chain.invoke({ input: input2 })
    console.log('üöÄ ~ res2:', res2)
    result.push(res2.text)
    setHistory(result)

    const input3 = `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –Ω–∞–ø–∏—à–∏ —ç–ø–∏–∑–æ–¥ ‚Ññ3. –û–±—ä—ë–º –æ–∫–æ–ª–æ 3000 —Å–∏–º–≤–æ–ª–æ–≤`
    const res3 = await chain.invoke({ input: input3 })
    console.log('üöÄ ~ res3:', res3)
    result.push(res3.text)
    setHistory(result)

    const inputMeta = `–°—Ñ–æ—Ä–º–∏—Ä—É–π JSON —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:
{summary: "_summary_", summaryEn: "_summaryEn_", coverText: "_coverText_", coverTextEn: "_coverTextEn_", description: "_description_", storyTitles: ["name1", "name2", ... "name10"]}
–≥–¥–µ summary - —Å–∞–º–º–∞—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –æ—Ç 300 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤;
summaryEn - –ø–µ—Ä–µ–≤–æ–¥ summary –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫;
coverText - —Å–æ—Å—Ç–∞–≤—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ—Ä–µ–Ω–∞—Ü–∏–∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –∫ —ç—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏, –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ—Å—Ç–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏—Ö –∏–º–µ–Ω, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –æ–∫–æ–ª–æ 300 —Å–∏–º–≤–æ–ª–æ–≤;
coverTextEn - –ø–µ—Ä–µ–≤–æ–¥ coverText –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫;
description - –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ;
storyTitles - –º–∞—Å—Å–∏–≤ –∏–∑ 10 –Ω–∞–∑–≤–∞–Ω–∏–π –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`
    const resMeta = await chain.invoke({ input: inputMeta })
    console.log('üöÄ ~ resMeta:', resMeta)
    result.push(resMeta.text)
    setHistory(result)

    // const mem = await memory.loadMemoryVariables({})
    // console.log('üöÄ ~ memory:', mem)
    // result.push(mem[memoryKey])
    // setHistory(result)
    setValue(null)
  }, [chain, history, memory, value])

  return (
    <div>
      <p>
        <button onClick={initMemory}>initMemory</button>
      </p>
      <p>
        <button onClick={initPrompt}>initPrompt</button>
      </p>
      <p>
        <button onClick={initChain}>initChain</button>
      </p>

      <ul>
        {history.map((h, i) => (
          <li key={i} style={{ whiteSpace: 'pre-wrap' }}>
            {h}
          </li>
        ))}
      </ul>

      <p>
        <TextArea rows={4} onChange={e => setValue(e.target.value)} value={value || ''} />
        <button disabled={!value} onClick={handleInvoke}>
          Submit
        </button>
      </p>
    </div>
  )
}
